[tool.poetry]
name = "test_project"
version = "0.1.0"
description = "A brief description of your project"
authors = ["Test Author <test@example.com>" ]
license = "MIT"
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "test_project"
version = "0.1.0"
description = "A brief description of your project"
authors = [
    {name = "Test Author", email = "test@example.com"},
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "colorama>=0.4.6",
    "click>=8.1.0",
    "rich>=13.0.0",
    "click-man>=0.4.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "types-pyyaml>=6.0.0",
    "build>=1.0.0",
    "mkdocs-material>=9.5.0",
    "pre-commit>=3.7.0",
]
[project.scripts]
test_project = "test_project.cli:main"
test_project-man = "test_project.cli:generate_man_page"

[project.urls]
Homepage = "https://github.com/ty10ng/test_project"
Repository = "https://github.com/ty10ng/test_project"
Documentation = "https://ty10ng.github.io/test_project"
Issues = "https://github.com/ty10ng/test_project/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["src"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=test_project",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80",
]

[tool.coverage.run]
source = ["test_project"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py311"
line-length = 100
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.isort]
known-first-party = ["test_project"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_optional = true
strict_equality = true
extra_checks = true
check_untyped_defs = true
disallow_any_generics = false  # Allow flexibility for new projects
disallow_untyped_defs = false  # Start lenient, can be tightened
disallow_incomplete_defs = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
ignore_errors = true
