name: Test Generated Project

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-template:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        project-type: ["library", "cli-application"]

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3  # v5.1.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install cookiecutter
        run: |
          python -m pip install --upgrade pip
          pip install cookiecutter

      - name: Generate project from template
        run: |
          cookiecutter . --no-input \
            project_name="Test Project" \
            project_slug="test_project" \
            package_name="test_project" \
            project_type="${{ matrix.project-type }}" \
            author_name="Test Author" \
            author_email="test@example.com" \
            github_username="ty10ng" \
            python_version="${{ matrix.python-version }}"

      - name: Install generated project dependencies
        run: |
          cd test_project
          python -m pip install -e ".[dev]"

      - name: Run pre-commit hooks on generated project
        run: |
          cd test_project
          pre-commit run --all-files

      - name: Test Ruff linting and formatting
        run: |
          cd test_project
          echo "Testing Ruff linting..."
          ruff check .
          echo "✅ Ruff linting passed"
          
          echo "Testing Ruff formatting..."
          ruff format --check .
          echo "✅ Ruff formatting check passed"

      - name: Test mypy type checking
        run: |
          cd test_project
          echo "Testing mypy type checking..."
          mypy src/
          echo "✅ Mypy type checking passed"

      - name: Test pytest with coverage
        run: |
          cd test_project
          echo "Running pytest with coverage..."
          pytest -q --cov --cov-report=xml -W error
          echo "✅ Pytest with coverage passed"

      - name: Test package import and basic functionality
        run: |
          cd test_project
          PYTHONPATH=src python -c "
          import sys
          sys.path.insert(0, 'src')
          
          import test_project
          from test_project import get_logger, get_config
          from test_project.config import Config
          print('✅ All imports successful')
          
          # Test logger
          logger = get_logger('test')
          logger.info('Test log message')
          print('✅ Logger works')
          
          # Test config
          config = get_config()
          app_name = config.get('app.name', 'default')
          print(f'✅ Config works: app.name = {app_name}')
          
          print('✅ All basic functionality tests passed')
          "

      - name: Test logger functionality
        run: |
          cd test_project
          PYTHONPATH=src python -c "
          import sys
          sys.path.insert(0, 'src')
          
          from test_project import get_logger, info, warning, error
          from test_project.logger import TestprojectLogger
          
          # Test singleton pattern
          logger1 = TestprojectLogger()
          logger2 = TestprojectLogger()
          assert logger1 is logger2, 'Logger should be singleton'
          print('✅ Logger singleton pattern works')
          
          # Test convenience functions
          info('Test info message')
          warning('Test warning message')
          error('Test error message')
          print('✅ Logger convenience functions work')
          
          # Test named logger
          named_logger = get_logger('test.module')
          named_logger.info('Named logger test')
          print('✅ Named logger works')
          "

      - name: Test configuration functionality
        run: |
          cd test_project
          PYTHONPATH=src python -c "
          import sys
          sys.path.insert(0, 'src')
          
          import os
          from test_project.config import Config, get_config, reload_config
          
          # Test default config
          config = get_config()
          default_name = config.get('app.name')
          print(f'✅ Default config loaded: {default_name}')
          
          # Test environment variable override
          os.environ['TEST_PROJECT_APP_NAME'] = 'test-from-env'
          reload_config()
          config = get_config()
          env_name = config.get('app.name')
          assert env_name == 'test-from-env', f'Expected test-from-env, got {env_name}'
          print('✅ Environment variable override works')
          
          # Test nested config access
          log_level = config.get('logging.level', 'INFO')
          print(f'✅ Nested config access works: logging.level = {log_level}')
          "

      - name: Test security features
        run: |
          cd test_project
          PYTHONPATH=src python -c "
          import sys
          sys.path.insert(0, 'src')
          
          from test_project.logger import SensitiveDataFilter
          import logging
          
          # Test sensitive data filtering
          filter_instance = SensitiveDataFilter()
          
          # Create a test log record
          record = logging.LogRecord(
              name='test',
              level=logging.INFO,
              pathname='test.py',
              lineno=1,
              msg='Password: secret123, API Key: abc123def',
              args=(),
              exc_info=None
          )
          
          # Apply filter
          result = filter_instance.filter(record)
          assert '[REDACTED]' in record.getMessage(), 'Sensitive data should be redacted'
          print('✅ Sensitive data filtering works')
          
          print('✅ Security features test passed')
          "

      - name: Run unit tests
        run: |
          cd test_project
          python -m pytest tests/ -v --tb=short

      - name: Test CLI functionality (if applicable)
        if: matrix.project-type == 'cli-application'
        run: |
          cd test_project
          echo "Testing CLI functionality..."
          python run_test_project.py --help
          echo "✅ CLI help command works"
          python run_test_project.py status
          echo "✅ CLI status command works"
          python run_test_project.py hello World
          echo "✅ CLI hello command works"
          python -m test_project.cli --help
          echo "✅ CLI module entry point works"

      - name: Test project structure
        run: |
          cd test_project
          echo "Testing project structure..."
          [ -f "pyproject.toml" ] && echo "✅ pyproject.toml exists"
          [ -f "README.md" ] && echo "✅ README.md exists"
          [ -f ".env.example" ] && echo "✅ .env.example exists"
          [ -d "src/test_project" ] && echo "✅ Package directory exists"
          [ -f "src/test_project/__init__.py" ] && echo "✅ Package __init__.py exists"
          [ -f "src/test_project/config.py" ] && echo "✅ config.py exists"
          [ -f "src/test_project/logger.py" ] && echo "✅ logger.py exists"
          [ -d "tests" ] && echo "✅ Tests directory exists"
          
          # CLI-specific structure tests
          if [ "${{ matrix.project-type }}" = "cli-application" ]; then
            [ -f "run_test_project.py" ] && echo "✅ CLI run script exists"
            [ -f "src/test_project/cli.py" ] && echo "✅ CLI module exists"
          else
            [ ! -f "run_test_project.py" ] && echo "✅ No run script for library (correct)"
            [ ! -f "src/test_project/cli.py" ] && echo "✅ No CLI module for library (correct)"
          fi
          
          echo "✅ Project structure validation passed"
